#!groovy

@Library('jenkinsfile@master') _

//func from sharelibrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()
def nexus = new org.devops.nexus()

String BuildType = "${env.buildType}"
String BuildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"

String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"

pipeline{
    agent { node { label "master"}}
    
    stages{
        
          stage("CheckOut"){
             steps{
                script{
                    
                    if("${runOpts}" == "GitlabPush"){
                        branchName = branch - "refs/heads/"
                        
                        currentBuild.description = "Trigger by ${userName} ${ref}"
                        gitlab.ChangeCommitStatus(projectId,commitSha,"running")
                    }
                    println("${branchName}")
                    
                    tools.PrintMes("获取代码","green")
                    //checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '1d092af9-a2e2-4731-8d62-6f03057f6018', url: 'https://code.alstru.cn/gexiaohu/demo-maven-service.git']]])
                    checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], 
                     doGenerateSubmoduleConfigurations: false, 
                     extensions: [], 
                     submoduleCfg: [], 
                     userRemoteConfigs: [[credentialsId: 'gitlab-admin-user', url: "${srcUrl}"]]])

                }
              }
          }   

          stage("Build"){
              steps{
                script{
                      tools.PrintMes("执行打包","green")
                      build.Build(buildType,buildShell)
                    //deploy.SaltDeploy("${deployHosts}","test.ping")
                    //deploy.AnsibleDeploy("${deployHosts}","-m ping")
                    
                   /* def jarName = sh returnStdout: true, script: "cd target;ls *.jar"
                    jarName = jarName - "\n"

                    def pom = readMavenPom file: 'pom.xml'
                    pomVersion = "${pom.version}"
                    pomArtifact = "${pom.artifactId}"
                    pomPackaging = "${pom.packaging}"
                    pomGroupId = "${pom.groupId}"

                    println("${pomGroupId}-${pomArtifact}-${pomVersion}-${pomPackaging}")

                    def mvnHome = tool "maven"
                    sh  """ 
                        cd target/
                        ${mvnHome}/bin/mvn deploy:deploy-file -Dmaven.test.skip=true  \
                                                -Dfile=${jarName} -DgroupId=${pomGroupId} \
                                                -DartifactId=${pomArtifact} -Dversion=${pomVersion}  \
                                                -Dpackaging=${pomPackaging} -DrepositoryId=maven-hostd \
                                                -Durl=http://nexus.alstru.com/repository/maven-hostd 
                    """ 
                     //use nexus plugin
                    def repoName = "maven-hostd"
                    def filePath = "target/${jarName}"
                    nexusArtifactUploader artifacts: [[artifactId: "${pomArtifact}", 
                                                        classifier: '', 
                                                        file: "${filePath}", 
                                                        type: "${pomPackaging}"]], 
                        credentialsId: 'nexus3', 
                        groupId: "${pomGroupId}", 
                        nexusUrl: 'nexus.alstru.com', 
                        nexusVersion: 'nexus3', 
                        protocol: 'http', 
                        repository: "${repoName}", 
                        version: "${pomVersion}"
                    */
                    
                    nexus.main("maven")
                  }
              }
         }
         
        stage("QA"){
              steps{
                script{
                    tools.PrintMes("搜索项目","green")
                    result = sonarapi.SerarchProject("${JOB_NAME}")
                    println(result)
                    
                    if (result == "false"){
                        println("${JOB_NAME}---项目不存在,准备创建项目---> ${JOB_NAME}！")
                        sonarapi.CreateProject("${JOB_NAME}")
                    } else {
                        println("${JOB_NAME}---项目已存在！")
                    }
                    
                    tools.PrintMes("配置项目质量规则","green")
                    qpName="${JOB_NAME}".split("-")[0]   //Sonar%20way
                    sonarapi.ConfigQualityProfiles("${JOB_NAME}","java",qpName)
                
                    tools.PrintMes("配置质量阈","green")
                    sonarapi.ConfigQualityGates("${JOB_NAME}",qpName)
                    
                    tools.PrintMes("代码扫描","green")
                    sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src","${branchName}")
                    //sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src")
                                        sleep 30
                    tools.PrintMes("获取扫描结果","green")
                    result = sonarapi.GetProjectStatus("${JOB_NAME}")
                    
                    
                    println(result)
                    if (result.toString() == "ERROR"){
                        toemail.Email("代码质量阈错误！请及时修复！",userEmail)
                        error " 代码质量阈错误！请及时修复！"
                    } else {
                        println(result)
                    }
                    
                    
                  }
              }
         }
        
    
    }
    
    post {
          always {
              script {
                println("always")
              }
          }

          success {
              script {
                println("success")
                    gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                    toemail.Email("流水线成功",userEmail)
              }
          }
          failure {
              script {
                println("failure")
                   gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                   toemail.Email("流水线失败",userEmail)
              }
          }
          aborted {
              script {
                println("aborted")
                    gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                    toemail.Email("流水线被取消了",userEmail)
              }
          } 
     }

}
