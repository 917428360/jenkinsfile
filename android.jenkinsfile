#!groovy

@Library('jenkinsfile@master') _

//func from shareibrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()
def nexus = new org.devops.nexus()
//def artifactory = new org.devops.artifactory() 
//def k8s = new org.devops.kubernetes()
def android = new org.devops.android()


def runOpts
//env
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"
String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"
String artifactUrl = "${env.artifactUrl}"


if ("${runOpts}" == "GitlabPush"){
    branchName = branch - "refs/heads/"
    
    currentBuild.description = "Trigger by ${userName} ${branch}"
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")
    env.runOpts = "GitlabPush"

    
} else {
   userEmail = "xiaohu.ge@alstru.com"
}


//pipeline
pipeline{
    agent { node { label "master"}}
    
    
    stages{

       stage("GetCode"){
            steps{
                script{
                    println("${branchName}")
                
                    tools.PrintMes("获取代码","green")
                    checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], 
                                      doGenerateSubmoduleConfigurations: false, 
                                      extensions: [], 
                                      submoduleCfg: [], 
                                      userRemoteConfigs: [[credentialsId: 'gitlab-admin-user', url: "${srcUrl}"]]])
                }
            }
        }
        stage("Build&Test"){
            steps{
                script{
                    tools.PrintMes("执行打包","green")
                    
                    sh """
                        export ANDROID_HOME=/usr/local/android-sdk-linux
                        export PATH=\$PATH:\$ANDROID_HOME/tools/bin
                       """
                       
                    build.Build(buildType,buildShell)
                    publishHTML([allowMissing: false, 
                                 alwaysLinkToLastBuild: false, 
                                 keepAll: false, 
                                 reportDir: 'app/build/reports/', 
                                 reportFiles: 'lint-results.html', 
                                 reportName: 'HTML Report', 
                                 reportTitles: ''])
                    
                }
            }
        }
       
       
        //并行
       
        stage("QA"){
            steps {
                script{
                    tools.PrintMes("搜索项目","green")
                    result = sonarapi.SerarchProject("${JOB_NAME}")
                    println(result)
                    
                    if (result == "false"){
                        println("${JOB_NAME}---项目不存在,准备创建项目---> ${JOB_NAME}！")
                        sonarapi.CreateProject("${JOB_NAME}")
                    } else {
                        println("${JOB_NAME}---项目已存在！")
                    }
                    
                    tools.PrintMes("配置项目质量规则","green")
                    qpName="${JOB_NAME}".split("-")[0]   //Sonar%20way
                    sonarapi.ConfigQualityProfiles("${JOB_NAME}","java",qpName)
                
                    tools.PrintMes("配置质量阈","green")
                    sonarapi.ConfigQualityGates("${JOB_NAME}",qpName)
                
                    tools.PrintMes("代码扫描","green")
                    //sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}",".","${branchName}")
                    
                    sleep 30
                    tools.PrintMes("获取扫描结果","green")
                    //result = sonarapi.GetProjectStatus("${JOB_NAME}")
                    
                    
                    println(result)
                    if (result.toString() == "ERROR"){
                        toemail.Email("代码质量阈错误！请及时修复！",userEmail)
                        error " 代码质量阈错误！请及时修复！"
                        
                        
                    } else {
                        println(result)
                    }
                }
           }
        }

        //发布
        stage("Deploy"){
            steps{
                script{
                    tools.PrintMes("发布应用","green")
                    
                    serviceName = "${JOB_NAME.split("_")[0]}"
                    sh "mv app/build/outputs/apk/debug/app-debug.apk ./${serviceName}.apk"
                    
                    tools.PrintMes("发布应用---Fir","green")
                    android.UploadFir("android","1.1",serviceName,"1.1.1","${serviceName}.apk")
                    
                    tools.PrintMes("发布应用---Pgyer","green")
                    result = readJSON text: """${android.UploadPgyer("${serviceName}.apk")}"""
                    
                    imageUrl = result["data"]["appQRCodeURL"]
                    currentBuild.description = "<img src=${imageUrl}"
                
                   
                    
    
                }
            }
        }
       
    }
    post {
        always{
            script{
                println("always")
            }
        }
        
        success{
            script{
                println("success")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                }
                toemail.Email("流水线成功",userEmail)
                //test 
                emailext to: 'xiaohu.ge@alstru.com', subject: "Job [${env.JOB_NAME}] - Status: ${currentBuild.result?: 'success'}", body: 
                """
                <p>EXECUTED: Job <b>\' ${env.JOB_NAME}：${env.BUILD_NUMBER}\'
                </b></p><p>View console output at "<a href= "${env.BUILD_URL}">
                ${env.JOB_NAME}：${env.BUILD_NUMBER}</a>"</p>
                <p><i>(Build log is attached.)</i></p>
                """, attachLog: true, compressLog: true
                pushplus (
                  "inner"
                )
                //test d1
                slackSend channel: "#数字双胞胎自动通知", message: "Build 成功！: ${env.JOB_NAME} ${env.BUILD_NUMBER}"
                 dingtalk (
                        robot: '47b2a5d1-ae17-45cb-8ea2-b70f9db10c71',
                        type: 'TEXT',
                        text: [
                            '测试文本类型的消息',
                            '分行显示，哈哈哈哈'
                        ],
                        at: [
                            '13639087076'
                        ]
                    )
                
                //test d2
                success {
                    dingtalk (
                        robot: '47b2a5d1-ae17-45cb-8ea2-b70f9db10c71',
                        type: 'LINK',
                        title: '你有新的消息，请注意查收',
                        text: [
                            '测试链接类型的消息',
                            '分行显示，哈哈哈哈'
                        ],
                        messageUrl: 'http://www.baidu.com',
                        picUrl: 'https://www.picdiet.com/img/photographer_compressed.jpg'
                    )
                //test d3
                
                //test d4
            }
        
        }
        failure{
            script{
                println("failure")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                }
                toemail.Email("流水线失败了！",userEmail)
                 pushplus (
                  "inner"
                )
            }
        }
        
        aborted{
            script{
                println("aborted")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                }
               toemail.Email("流水线被取消了！",userEmail)
                 pushplus (
                  "inner"
                )
            }
        
        }
    
    }
    
    
}
